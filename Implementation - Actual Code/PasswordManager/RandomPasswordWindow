package PasswordManager;

import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextArea;
// all imports for the program



public class RandomPasswordWindow extends JFrame implements ActionListener {
    private static final String LAlphabet_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    private static final String UAlphabet_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String Numbers_CHARACTERS = "1234567890";
    private static final String SCharacter_CHARACTERS = "~!@#$%^&*()_|";
    // lists for the different characters in the password
    
    private final JButton MakeButton;
    private final JButton ReturnBtn;
    private final JButton CopyButton;
    private final JCheckBox SpecialOption;
    private final JScrollPane jScrollPane1;
    private final JTextArea PasswordBox;
    private final JLabel Title;
    private final JSlider NumberSlider;
    private final JLabel InfoNumberOfChars;
    private final JLabel PassWordLength;
    private final JLabel SpecialCharacterText;
    
    public RandomPasswordWindow() {
        super("Password Manager");
                            
        MakeButton = new JButton();
        ReturnBtn = new JButton("Return");
        CopyButton = new JButton();  //making all the components for the frame
        SpecialOption = new JCheckBox();
        jScrollPane1 = new JScrollPane();
        PasswordBox = new JTextArea();
        Title = new JLabel(); 
        NumberSlider = new JSlider();
        InfoNumberOfChars = new JLabel();
        PassWordLength = new JLabel();
        SpecialCharacterText = new JLabel();
        this.setLayout(new GridBagLayout());
        
        ReturnBtn.addActionListener(new ActionListener() {  //for clicking button that makes password
        public void actionPerformed(ActionEvent evt) {    
        ReturnBtnActionPerformed(evt);}});
        
        MakeButton.setMnemonic('\r');      //All attributes being declared for the components
        MakeButton.setText("Create a password");
        MakeButton.addActionListener(new ActionListener() {  //for clicking button that makes password
        public void actionPerformed(ActionEvent evt) {    
        MakeButtonActionPerformed(evt);}});
        
        CopyButton.setText("Copy this password");   //for copying the password
        CopyButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
        copyToClipboard(evt);} });
        
        PasswordBox.setColumns(20);  //text box dimentions
        PasswordBox.setRows(5);
        
        jScrollPane1.setViewportView(PasswordBox);
        
        Title.setText("Password Generation"); 
        
        SpecialCharacterText.setText("Special Characters?");
        
        NumberSlider.setMajorTickSpacing(5);
        NumberSlider.setMaximum(25);
        NumberSlider.setMinimum(5);    //all properties for the slider. slider is for number of characters in the password
        NumberSlider.setMinorTickSpacing(1);
        NumberSlider.setPaintLabels(true);
        NumberSlider.setPaintTicks(true);
        NumberSlider.setValue(10);
        NumberSlider.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
        sliderStateChanged(evt);}});
        
        InfoNumberOfChars.setText("number of characters:");
        
        PassWordLength.setText("10");  //more attributes about length

        //layout of the window
        
        GridBagConstraints grid = new GridBagConstraints();
        
        grid.weightx = 1; //amount of horizontal space for each grid box
        grid.weighty = 1; //amount of vertical space for each grid box
        
        grid.anchor = GridBagConstraints.WEST;
        grid.gridx = 0;
        grid.gridy = 0;
        add(Title, grid);
        
        grid.gridy = 1;
        add(InfoNumberOfChars, grid);
        
        grid.gridx = 1;
        add(PassWordLength, grid);
        
        grid.gridx = 0;
        grid.gridy = 2;
        add(NumberSlider, grid);
        
        grid.anchor = GridBagConstraints.EAST;
        grid.gridy = 3;
        add(SpecialCharacterText,grid);
        
        grid.anchor = GridBagConstraints.WEST;
        grid.gridx = 1;
        add(SpecialOption, grid);
        
        grid.anchor = GridBagConstraints.CENTER;
        grid.gridx = 0;
        grid.gridy = 4;
        add(MakeButton, grid);
        
        grid.gridx = 1;
        add(CopyButton, grid);
        
        grid.anchor = GridBagConstraints.WEST;
        grid.gridy = 7;
        add(PasswordBox, grid);
        
        grid.anchor = GridBagConstraints.CENTER;
        grid.gridx = 0;
        grid.gridy = 8;
        add(jScrollPane1, grid);
        
        grid.gridy = 9;
        add(ReturnBtn, grid);
        
        
        
    }
                

    private void MakeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String charactersToBeUsed = "";
        charactersToBeUsed = UAlphabet_CHARACTERS; 
        charactersToBeUsed += LAlphabet_CHARACTERS;    // always true    
        charactersToBeUsed += Numbers_CHARACTERS;      //these are what makes all characters be used
        if (SpecialOption.isSelected()) {
        charactersToBeUsed += SCharacter_CHARACTERS;}
        
        PasswordScrambler GenPass = new PasswordScrambler(charactersToBeUsed);
        int numberOfChars = Integer.parseInt(PassWordLength.getText());    //sends to making the password

        String FinalPassword = GenPass.generate(numberOfChars);

        PasswordBox.setEditable(false);
        PasswordBox.setText(FinalPassword);
        
    }

     private void ReturnBtnActionPerformed(java.awt.event.ActionEvent evt) {
         MainWindow mainWindow = new MainWindow();
         mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         mainWindow.setSize(500, 300);
         mainWindow.setVisible(true);
         mainWindow.setResizable(false);
         dispose();
        
     }
    
    
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {                                    
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {       //setting the password length number which changes based on slider
            PassWordLength.setText(Integer.toString(source.getValue()));
        }
    }                                   

    private void copyToClipboard(java.awt.event.ActionEvent evt) {                                 
        String myString = PasswordBox.getText();  //button to copy clipboard
        StringSelection stringSelection = new StringSelection (myString);  // using built in methods to copy
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard ();
        clpbrd.setContents (stringSelection, null);
    }                                

    @Override
    public void actionPerformed(ActionEvent ae) {   //must be in to deal with problems
        throw new UnsupportedOperationException("");
    }
}
